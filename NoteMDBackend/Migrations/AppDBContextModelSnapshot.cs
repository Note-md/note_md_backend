// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoteMDBackend.Entity;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NoteMDBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NoteMDBackend.Entity.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("NoteId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("NoteMDBackend.Entity.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "C#",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6130), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "1",
                            Description = "C#",
                            Name = "C#",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Code = "Java",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6140), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "1",
                            Description = "Java",
                            Name = "Java",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Code = "Python",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6143), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "1",
                            Description = "Python",
                            Name = "Python",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 4,
                            Code = "C++",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6146), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "1",
                            Description = "C++",
                            Name = "C++",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 5,
                            Code = "JavaScript",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6149), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "1",
                            Description = "JavaScript",
                            Name = "JavaScript",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 6,
                            Code = "PHP",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6152), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "1",
                            Description = "PHP",
                            Name = "PHP",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 7,
                            Code = "HTML",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6155), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "1",
                            Description = "HTML",
                            Name = "HTML",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 8,
                            Code = "CSS",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6158), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "1",
                            Description = "CSS",
                            Name = "CSS",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 9,
                            Code = "SQL",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6164), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "1",
                            Description = "SQL",
                            Name = "SQL",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 10,
                            Code = "Ruby",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6167), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "1",
                            Description = "Ruby",
                            Name = "Ruby",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 11,
                            Code = "Swift",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6170), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "1",
                            Description = "Swift",
                            Name = "Swift",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("NoteMDBackend.Entity.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Markdown")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("46394a2b-3edb-426a-b034-94ba2bb1d3c4"),
                            CourseId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6219), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "1",
                            Markdown = "C#",
                            Status = "Active",
                            Title = "C#",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6222), new TimeSpan(0, -4, 0, 0, 0)),
                            Visibility = "Public"
                        },
                        new
                        {
                            Id = new Guid("7bdd5353-b4e1-4a9f-b53f-33c70a9a7481"),
                            CourseId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6251), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "1",
                            Markdown = "Java",
                            Status = "Active",
                            Title = "Java",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6254), new TimeSpan(0, -4, 0, 0, 0)),
                            Visibility = "Public"
                        },
                        new
                        {
                            Id = new Guid("eb1c56dd-6211-463b-acb0-8f69eb653140"),
                            CourseId = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6263), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "1",
                            Markdown = "Python",
                            Status = "Active",
                            Title = "Python",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6266), new TimeSpan(0, -4, 0, 0, 0)),
                            Visibility = "Public"
                        },
                        new
                        {
                            Id = new Guid("0167c287-2b4f-4c26-a7cc-dca28c001b1b"),
                            CourseId = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6274), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "1",
                            Markdown = "C++",
                            Status = "Active",
                            Title = "C++",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6277), new TimeSpan(0, -4, 0, 0, 0)),
                            Visibility = "Public"
                        },
                        new
                        {
                            Id = new Guid("30273311-ea4b-4e91-8284-f6f95c8ff75e"),
                            CourseId = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6285), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "1",
                            Markdown = "JavaScript",
                            Status = "Active",
                            Title = "JavaScript",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6288), new TimeSpan(0, -4, 0, 0, 0)),
                            Visibility = "Public"
                        },
                        new
                        {
                            Id = new Guid("25892878-bf0d-4e67-8945-602ae857ec56"),
                            CourseId = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6296), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "1",
                            Markdown = "PHP",
                            Status = "Active",
                            Title = "PHP",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6298), new TimeSpan(0, -4, 0, 0, 0)),
                            Visibility = "Public"
                        },
                        new
                        {
                            Id = new Guid("3d1433b8-61d6-4bac-8fda-9dd8bd5a3395"),
                            CourseId = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6307), new TimeSpan(0, -4, 0, 0, 0)),
                            CreatedBy = "1",
                            Markdown = "HTML",
                            Status = "Active",
                            Title = "HTML",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6310), new TimeSpan(0, -4, 0, 0, 0)),
                            Visibility = "Public"
                        });
                });

            modelBuilder.Entity("NoteMDBackend.Entity.NoteLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("NoteId");

                    b.ToTable("NoteLikes");
                });

            modelBuilder.Entity("NoteMDBackend.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("UserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("NoteMDBackend.Entity.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("NoteMDBackend.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ProgramEnrolled")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(5948), new TimeSpan(0, -4, 0, 0, 0)),
                            Description = "Admin",
                            Designation = "Admin",
                            FirstName = "Admin",
                            ImageURL = "https://i.imgur.com/6VBx3io.png",
                            LastName = "Admin",
                            ProgramEnrolled = "Admin",
                            Status = "Active",
                            UpdatedAt = new DateTimeOffset(new DateTime(2023, 10, 22, 12, 47, 2, 954, DateTimeKind.Unspecified).AddTicks(6013), new TimeSpan(0, -4, 0, 0, 0)),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("NoteMDBackend.Entity.Comment", b =>
                {
                    b.HasOne("NoteMDBackend.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteMDBackend.Entity.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoteMDBackend.Entity.Course", b =>
                {
                    b.HasOne("NoteMDBackend.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoteMDBackend.Entity.Note", b =>
                {
                    b.HasOne("NoteMDBackend.Entity.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteMDBackend.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoteMDBackend.Entity.NoteLike", b =>
                {
                    b.HasOne("NoteMDBackend.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteMDBackend.Entity.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoteMDBackend.Entity.Product", b =>
                {
                    b.HasOne("NoteMDBackend.Entity.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteMDBackend.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoteMDBackend.Entity.Sale", b =>
                {
                    b.HasOne("NoteMDBackend.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteMDBackend.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
